{"ast":null,"code":"class CanvasWorldView {\n  constructor(scalingFactor) {\n    this.scalingFactor = void 0;\n    this.worldCanvas = void 0;\n    this.context = void 0;\n    this.scalingFactor = scalingFactor;\n    this.worldCanvas = document.createElement(\"canvas\");\n    this.context = this.worldCanvas.getContext(\"2d\");\n    document.body.appendChild(this.worldCanvas);\n  }\n\n  display(worldModel) {\n    const snake = worldModel.snake;\n    this.worldCanvas.width = worldModel.width * this.scalingFactor;\n    this.worldCanvas.height = worldModel.height * this.scalingFactor;\n    this.context.fillStyle = snake.color;\n    this.context.fillRect(snake.position.x, snake.position.y, this.scalingFactor, this.scalingFactor);\n  }\n\n}\n\nexport default CanvasWorldView;","map":{"version":3,"sources":["/Users/roberttineo/Desktop/snake-game/src/CanvasWorldView.ts"],"names":["CanvasWorldView","constructor","scalingFactor","worldCanvas","context","document","createElement","getContext","body","appendChild","display","worldModel","snake","width","height","fillStyle","color","fillRect","position","x","y"],"mappings":"AAGA,MAAMA,eAAN,CAA4C;AAK1CC,EAAAA,WAAW,CAACC,aAAD,EAAwB;AAAA,SAJ3BA,aAI2B;AAAA,SAH3BC,WAG2B;AAAA,SAF3BC,OAE2B;AACjC,SAAKF,aAAL,GAAqBA,aAArB;AACA,SAAKC,WAAL,GAAmBE,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CAAnB;AACA,SAAKF,OAAL,GAAe,KAAKD,WAAL,CAAiBI,UAAjB,CAA4B,IAA5B,CAAf;AAEAF,IAAAA,QAAQ,CAACG,IAAT,CAAcC,WAAd,CAA0B,KAAKN,WAA/B;AACD;;AAEMO,EAAAA,OAAO,CAACC,UAAD,EAAyB;AACrC,UAAMC,KAAK,GAAGD,UAAU,CAACC,KAAzB;AACA,SAAKT,WAAL,CAAiBU,KAAjB,GAAyBF,UAAU,CAACE,KAAX,GAAmB,KAAKX,aAAjD;AACA,SAAKC,WAAL,CAAiBW,MAAjB,GAA0BH,UAAU,CAACG,MAAX,GAAoB,KAAKZ,aAAnD;AAEA,SAAKE,OAAL,CAAaW,SAAb,GAAyBH,KAAK,CAACI,KAA/B;AACA,SAAKZ,OAAL,CAAaa,QAAb,CACEL,KAAK,CAACM,QAAN,CAAeC,CADjB,EAEEP,KAAK,CAACM,QAAN,CAAeE,CAFjB,EAGE,KAAKlB,aAHP,EAIE,KAAKA,aAJP;AAMD;;AAzByC;;AA2B5C,eAAeF,eAAf","sourcesContent":["import IWorldView from \"./IWorldView\";\nimport WorldModel from \"./WorldModel\";\n\nclass CanvasWorldView implements IWorldView {\n  private scalingFactor: number;\n  private worldCanvas: HTMLCanvasElement;\n  private context: CanvasRenderingContext2D;\n\n  constructor(scalingFactor: number) {\n    this.scalingFactor = scalingFactor;\n    this.worldCanvas = document.createElement(\"canvas\");\n    this.context = this.worldCanvas.getContext(\"2d\")!;\n\n    document.body.appendChild(this.worldCanvas);\n  }\n\n  public display(worldModel: WorldModel) {\n    const snake = worldModel.snake;\n    this.worldCanvas.width = worldModel.width * this.scalingFactor;\n    this.worldCanvas.height = worldModel.height * this.scalingFactor;\n\n    this.context.fillStyle = snake.color;\n    this.context.fillRect(\n      snake.position.x,\n      snake.position.y,\n      this.scalingFactor,\n      this.scalingFactor\n    );\n  }\n}\nexport default CanvasWorldView;\n"]},"metadata":{},"sourceType":"module"}