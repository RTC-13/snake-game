{"ast":null,"code":"class WorldModel {\n  constructor(worldWidth, worldHeight) {\n    this._width = void 0;\n    this._height = void 0;\n    this._allSnakes = void 0;\n    this._allViews = void 0;\n    // keept old parameters due to tests breaking/other problems\n    this._width = worldWidth;\n    this._height = worldHeight;\n    this._allSnakes = [];\n    this._allViews = [];\n  }\n\n  update(steps) {\n    // Create a temporary array to store collided snakes\n    const collidedSnakes = []; // Move all snakes and display views\n\n    this._allSnakes.forEach(snake => snake.move(steps));\n\n    if (this._allViews) {\n      this._allViews.forEach(view => view.display(this));\n    } // Check for collisions\n\n\n    for (let i = 0; i < this._allSnakes.length; i++) {\n      const snakeA = this._allSnakes[i];\n\n      for (let j = i + 1; j < this._allSnakes.length; j++) {\n        const snakeB = this._allSnakes[j];\n\n        if (snakeA.didCollide(snakeB) && !collidedSnakes.includes(snakeA)) {\n          collidedSnakes.push(snakeA);\n        }\n      }\n    } // Remove collided snakes from the allSnakes array\n\n\n    collidedSnakes.forEach(snake => {\n      const index = this._allSnakes.indexOf(snake);\n\n      if (index !== -1) {\n        this._allSnakes.splice(index, 1);\n      }\n    });\n  }\n\n  addSnake(s) {\n    this._allSnakes.push(s);\n  }\n\n  addView(v) {\n    this._allViews.push(v);\n  }\n\n  get allSnakes() {\n    return this._allSnakes;\n  }\n\n  get width() {\n    return this._width;\n  }\n\n  get height() {\n    return this._height;\n  }\n\n}\n\nexport default WorldModel;","map":{"version":3,"sources":["/Users/roberttineo/Desktop/snake-game/src/WorldModel.ts"],"names":["WorldModel","constructor","worldWidth","worldHeight","_width","_height","_allSnakes","_allViews","update","steps","collidedSnakes","forEach","snake","move","view","display","i","length","snakeA","j","snakeB","didCollide","includes","push","index","indexOf","splice","addSnake","s","addView","v","allSnakes","width","height"],"mappings":"AAGA,MAAMA,UAAN,CAAiB;AAMfC,EAAAA,WAAW,CAACC,UAAD,EAAqBC,WAArB,EAA0C;AAAA,SAL7CC,MAK6C;AAAA,SAJ7CC,OAI6C;AAAA,SAH7CC,UAG6C;AAAA,SAF7CC,SAE6C;AACnD;AACA,SAAKH,MAAL,GAAcF,UAAd;AACA,SAAKG,OAAL,GAAeF,WAAf;AACA,SAAKG,UAAL,GAAkB,EAAlB;AACA,SAAKC,SAAL,GAAiB,EAAjB;AACD;;AAEMC,EAAAA,MAAM,CAACC,KAAD,EAAsB;AACjC;AACA,UAAMC,cAAuB,GAAG,EAAhC,CAFiC,CAIjC;;AACA,SAAKJ,UAAL,CAAgBK,OAAhB,CAAyBC,KAAD,IAAWA,KAAK,CAACC,IAAN,CAAWJ,KAAX,CAAnC;;AACA,QAAI,KAAKF,SAAT,EAAoB;AAClB,WAAKA,SAAL,CAAeI,OAAf,CAAwBG,IAAD,IAAUA,IAAI,CAACC,OAAL,CAAa,IAAb,CAAjC;AACD,KARgC,CAUjC;;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKV,UAAL,CAAgBW,MAApC,EAA4CD,CAAC,EAA7C,EAAiD;AAC/C,YAAME,MAAM,GAAG,KAAKZ,UAAL,CAAgBU,CAAhB,CAAf;;AACA,WAAK,IAAIG,CAAC,GAAGH,CAAC,GAAG,CAAjB,EAAoBG,CAAC,GAAG,KAAKb,UAAL,CAAgBW,MAAxC,EAAgDE,CAAC,EAAjD,EAAqD;AACnD,cAAMC,MAAM,GAAG,KAAKd,UAAL,CAAgBa,CAAhB,CAAf;;AACA,YAAID,MAAM,CAACG,UAAP,CAAkBD,MAAlB,KAA6B,CAACV,cAAc,CAACY,QAAf,CAAwBJ,MAAxB,CAAlC,EAAmE;AACjER,UAAAA,cAAc,CAACa,IAAf,CAAoBL,MAApB;AACD;AACF;AACF,KAnBgC,CAqBjC;;;AACAR,IAAAA,cAAc,CAACC,OAAf,CAAwBC,KAAD,IAAW;AAChC,YAAMY,KAAK,GAAG,KAAKlB,UAAL,CAAgBmB,OAAhB,CAAwBb,KAAxB,CAAd;;AACA,UAAIY,KAAK,KAAK,CAAC,CAAf,EAAkB;AAChB,aAAKlB,UAAL,CAAgBoB,MAAhB,CAAuBF,KAAvB,EAA8B,CAA9B;AACD;AACF,KALD;AAMD;;AAEMG,EAAAA,QAAQ,CAACC,CAAD,EAAW;AACxB,SAAKtB,UAAL,CAAgBiB,IAAhB,CAAqBK,CAArB;AACD;;AAEMC,EAAAA,OAAO,CAACC,CAAD,EAAgB;AAC5B,SAAKvB,SAAL,CAAegB,IAAf,CAAoBO,CAApB;AACD;;AAEmB,MAATC,SAAS,GAAY;AAC9B,WAAO,KAAKzB,UAAZ;AACD;;AAEe,MAAL0B,KAAK,GAAW;AACzB,WAAO,KAAK5B,MAAZ;AACD;;AAEgB,MAAN6B,MAAM,GAAW;AAC1B,WAAO,KAAK5B,OAAZ;AACD;;AA9Dc;;AAiEjB,eAAeL,UAAf","sourcesContent":["import { Snake } from \"./Snake\";\r\nimport { IWorldView } from \"./IWorldView\";\r\n\r\nclass WorldModel {\r\n  private _width: number;\r\n  private _height: number;\r\n  private _allSnakes: Snake[];\r\n  private _allViews: IWorldView[];\r\n\r\n  constructor(worldWidth: number, worldHeight: number) {\r\n    // keept old parameters due to tests breaking/other problems\r\n    this._width = worldWidth;\r\n    this._height = worldHeight;\r\n    this._allSnakes = [];\r\n    this._allViews = [];\r\n  }\r\n\r\n  public update(steps: number): void {\r\n    // Create a temporary array to store collided snakes\r\n    const collidedSnakes: Snake[] = [];\r\n\r\n    // Move all snakes and display views\r\n    this._allSnakes.forEach((snake) => snake.move(steps));\r\n    if (this._allViews) {\r\n      this._allViews.forEach((view) => view.display(this));\r\n    }\r\n\r\n    // Check for collisions\r\n    for (let i = 0; i < this._allSnakes.length; i++) {\r\n      const snakeA = this._allSnakes[i];\r\n      for (let j = i + 1; j < this._allSnakes.length; j++) {\r\n        const snakeB = this._allSnakes[j];\r\n        if (snakeA.didCollide(snakeB) && !collidedSnakes.includes(snakeA)) {\r\n          collidedSnakes.push(snakeA);\r\n        }\r\n      }\r\n    }\r\n\r\n    // Remove collided snakes from the allSnakes array\r\n    collidedSnakes.forEach((snake) => {\r\n      const index = this._allSnakes.indexOf(snake);\r\n      if (index !== -1) {\r\n        this._allSnakes.splice(index, 1);\r\n      }\r\n    });\r\n  }\r\n\r\n  public addSnake(s: Snake) {\r\n    this._allSnakes.push(s);\r\n  }\r\n\r\n  public addView(v: IWorldView) {\r\n    this._allViews.push(v);\r\n  }\r\n\r\n  public get allSnakes(): Snake[] {\r\n    return this._allSnakes;\r\n  }\r\n\r\n  public get width(): number {\r\n    return this._width;\r\n  }\r\n\r\n  public get height(): number {\r\n    return this._height;\r\n  }\r\n}\r\n\r\nexport default WorldModel;\r\n"]},"metadata":{},"sourceType":"module"}