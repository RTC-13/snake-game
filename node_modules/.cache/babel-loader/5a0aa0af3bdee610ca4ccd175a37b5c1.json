{"ast":null,"code":"/**\n * Class representing a car store.\n */\nclass CarStore {\n  /**\n   * Class representing a car store.\n   * @param cars List of cars for the new car store.\n   */\n  constructor(cars) {\n    this.allCars = void 0;\n    this.allCars = cars;\n  }\n  /**\n   * Run a function that applies for all cars.\n   * @param f function\n   */\n\n\n  applyToAllCars(f) {\n    if (f instanceof Function) {\n      this.allCars.forEach(f); // from first question\n    } else {\n      this.allCars.forEach(f.apply); // IApplicator\n    }\n  }\n  /**\n   * Test drive a car using the specific index and the number of miles for the test drive.\n   * @param num The index of the car which is being test driven.\n   * @param miles The amount of miles recorded during the test drive.\n   */\n\n\n  testDriveCar(num, miles) {\n    this.allCars[num - 1].drive(miles); // 0th car is 1, 1st car is 2, etc.\n  }\n  /**\n   * Sell the car with the specified index.\n   * @param num The index of the car being sold.\n   */\n\n\n  sellCarNumber(num) {\n    this.allCars.splice(num - 1, 1);\n  }\n  /**\n   * Buy a car\n   * @param c\n   */\n\n\n  buyCar(c) {\n    this.allCars.push(c);\n  }\n  /**\n   * Get the list of cars in the car store.\n   *\n   */\n\n\n  get cars() {\n    return this.allCars; // may want to use iterator instead to avoid exposing Array, which can be modified\n    // return this.allCars.slice(); // Alternatively, return shallow copy of Array (if there should be order)\n  }\n\n}\n\nexport default CarStore;","map":{"version":3,"sources":["/Users/roberttineo/Desktop/snake-game/src/CarStore.ts"],"names":["CarStore","constructor","cars","allCars","applyToAllCars","f","Function","forEach","apply","testDriveCar","num","miles","drive","sellCarNumber","splice","buyCar","c","push"],"mappings":"AAGA;AACA;AACA;AACA,MAAMA,QAAN,CAAe;AAEb;AACF;AACA;AACA;AACEC,EAAAA,WAAW,CAACC,IAAD,EAAc;AAAA,SALjBC,OAKiB;AACvB,SAAKA,OAAL,GAAeD,IAAf;AACD;AACD;AACF;AACA;AACA;;;AACEE,EAAAA,cAAc,CAACC,CAAD,EAA2C;AACvD,QAAIA,CAAC,YAAYC,QAAjB,EAA2B;AACzB,WAAKH,OAAL,CAAaI,OAAb,CAAqBF,CAArB,EADyB,CACA;AAC1B,KAFD,MAEO;AACL,WAAKF,OAAL,CAAaI,OAAb,CAAqBF,CAAC,CAACG,KAAvB,EADK,CAC0B;AAChC;AACF;AAED;AACF;AACA;AACA;AACA;;;AACEC,EAAAA,YAAY,CAACC,GAAD,EAAcC,KAAd,EAA6B;AACvC,SAAKR,OAAL,CAAaO,GAAG,GAAG,CAAnB,EAAsBE,KAAtB,CAA4BD,KAA5B,EADuC,CACH;AACrC;AACD;AACF;AACA;AACA;;;AACEE,EAAAA,aAAa,CAACH,GAAD,EAAc;AACzB,SAAKP,OAAL,CAAaW,MAAb,CAAoBJ,GAAG,GAAG,CAA1B,EAA6B,CAA7B;AACD;AACD;AACF;AACA;AACA;;;AACEK,EAAAA,MAAM,CAACC,CAAD,EAAS;AACb,SAAKb,OAAL,CAAac,IAAb,CAAkBD,CAAlB;AACD;AACD;AACF;AACA;AACA;;;AACU,MAAJd,IAAI,GAAU;AAChB,WAAO,KAAKC,OAAZ,CADgB,CACK;AACrB;AACD;;AAlDY;;AAqDf,eAAeH,QAAf","sourcesContent":["import Car from \"./Car\";\nimport IApplicator from \"./IApplicator\";\n\n/**\n * Class representing a car store.\n */\nclass CarStore {\n  private allCars: Car[];\n  /**\n   * Class representing a car store.\n   * @param cars List of cars for the new car store.\n   */\n  constructor(cars: Car[]) {\n    this.allCars = cars;\n  }\n  /**\n   * Run a function that applies for all cars.\n   * @param f function\n   */\n  applyToAllCars(f: IApplicator<Car> | ((c: Car) => void)) {\n    if (f instanceof Function) {\n      this.allCars.forEach(f); // from first question\n    } else {\n      this.allCars.forEach(f.apply); // IApplicator\n    }\n  }\n\n  /**\n   * Test drive a car using the specific index and the number of miles for the test drive.\n   * @param num The index of the car which is being test driven.\n   * @param miles The amount of miles recorded during the test drive.\n   */\n  testDriveCar(num: number, miles: number) {\n    this.allCars[num - 1].drive(miles); // 0th car is 1, 1st car is 2, etc.\n  }\n  /**\n   * Sell the car with the specified index.\n   * @param num The index of the car being sold.\n   */\n  sellCarNumber(num: number) {\n    this.allCars.splice(num - 1, 1);\n  }\n  /**\n   * Buy a car\n   * @param c\n   */\n  buyCar(c: Car) {\n    this.allCars.push(c);\n  }\n  /**\n   * Get the list of cars in the car store.\n   *\n   */\n  get cars(): Car[] {\n    return this.allCars; // may want to use iterator instead to avoid exposing Array, which can be modified\n    // return this.allCars.slice(); // Alternatively, return shallow copy of Array (if there should be order)\n  }\n}\n\nexport default CarStore;\n"]},"metadata":{},"sourceType":"module"}