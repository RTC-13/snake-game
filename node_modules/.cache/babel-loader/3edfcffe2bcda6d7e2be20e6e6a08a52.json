{"ast":null,"code":"import { Player } from \"./Player\";\n\n/**\n * Class representing wall behavior according to player location. Stopping the user from leaving the confines of the world.\n */\nexport class AvoidWallsPlayer extends Player {\n  /**\n   * Create AvoidWallsPlayer\n   * @param {SnakeController} passedSakeController\n   */\n  constructor(passedSakeController) {\n    super(passedSakeController);\n  }\n  /**\n   * Turn the snake to avoid the user from hitting the walls of the canvas.\n   */\n\n\n  makeTurn() {\n    const snakeDirection = this.sc.snakeDirection;\n    const snakePosition = this.sc.snakePosition;\n    const worldHeight = this.sc.world.height;\n    const worldWidth = this.sc.world.width; // If the snake is moving backward and in the quadrant 1, turn the snake left to avoid left wall\n\n    if (snakeDirection === -1 && snakePosition.xcoordinate === 0 && snakePosition.ycoordinate < worldHeight / 2) {\n      this.sc.turnSnakeLeft();\n    } //If the snake is moving up and in quadrant 1, turn the snake right to avoid the top wall\n    else if (snakeDirection === 0 && snakePosition.xcoordinate < worldWidth / 2 && snakePosition.ycoordinate === 0) {\n      this.sc.turnSnakeRight();\n    } //If the snake is moving forward, in quadrant 2, turn the snake to the right to avoid the right wall\n    else if (snakeDirection === 1 && snakePosition.xcoordinate === worldWidth && snakePosition.ycoordinate < worldHeight / 2) {\n      this.sc.turnSnakeRight();\n    } //If the snake is moving up, in quadrant 2, turn the snake to the left to avoid the top wall\n    else if (snakeDirection === 0 && snakePosition.xcoordinate > worldWidth / 2 && snakePosition.ycoordinate === 0) {\n      this.sc.turnSnakeLeft();\n    } //If the snake is moving backward and in quadrant 3, turn the snake right to avoid the left wall\n    else if (snakeDirection === -1 && snakePosition.xcoordinate === 0 && snakePosition.ycoordinate > worldHeight / 2) {\n      this.sc.turnSnakeRight();\n    } //If the snake is moving down and in quadrant 3, turn the snake right to avoid bottom wall\n    else if (snakeDirection === 2 && snakePosition.xcoordinate < worldWidth / 2 && snakePosition.ycoordinate === worldHeight) {\n      this.sc.turnSnakeRight();\n    } //If the snake is moving down and in quadrant 4, turn the snake left to avoid the bottom wall\n    else if (snakeDirection === 2 && snakePosition.xcoordinate > worldWidth / 2 && snakePosition.ycoordinate === worldHeight) {\n      this.sc.turnSnakeLeft();\n    } //If the snake is moving forward in quadrant 4 turn the snake left to avoid the right wall\n    else if (snakeDirection === 1 && snakePosition.xcoordinate > worldWidth / 2 && snakePosition.ycoordinate === worldHeight) {\n      this.sc.turnSnakeLeft();\n    }\n  }\n\n}","map":{"version":3,"sources":["/Users/roberttineo/Desktop/snake-game/src/AvoidWallsPlayer.ts"],"names":["Player","AvoidWallsPlayer","constructor","passedSakeController","makeTurn","snakeDirection","sc","snakePosition","worldHeight","world","height","worldWidth","width","xcoordinate","ycoordinate","turnSnakeLeft","turnSnakeRight"],"mappings":"AAAA,SAASA,MAAT,QAAuB,UAAvB;;AAIA;AACA;AACA;AACA,OAAO,MAAMC,gBAAN,SAA+BD,MAA/B,CAAsC;AAC3C;AACF;AACA;AACA;AACEE,EAAAA,WAAW,CAACC,oBAAD,EAAwC;AACjD,UAAMA,oBAAN;AACD;AACD;AACF;AACA;;;AACEC,EAAAA,QAAQ,GAAS;AACf,UAAMC,cAAc,GAAG,KAAKC,EAAL,CAAQD,cAA/B;AACA,UAAME,aAAa,GAAG,KAAKD,EAAL,CAAQC,aAA9B;AACA,UAAMC,WAAW,GAAG,KAAKF,EAAL,CAAQG,KAAR,CAAcC,MAAlC;AACA,UAAMC,UAAU,GAAG,KAAKL,EAAL,CAAQG,KAAR,CAAcG,KAAjC,CAJe,CAKf;;AACA,QACEP,cAAc,KAAK,CAAC,CAApB,IACAE,aAAa,CAACM,WAAd,KAA8B,CAD9B,IAEAN,aAAa,CAACO,WAAd,GAA4BN,WAAW,GAAG,CAH5C,EAIE;AACA,WAAKF,EAAL,CAAQS,aAAR;AACD,KAND,CAOA;AAPA,SAQK,IACHV,cAAc,KAAK,CAAnB,IACAE,aAAa,CAACM,WAAd,GAA4BF,UAAU,GAAG,CADzC,IAEAJ,aAAa,CAACO,WAAd,KAA8B,CAH3B,EAIH;AACA,WAAKR,EAAL,CAAQU,cAAR;AACD,KANI,CAOL;AAPK,SAQA,IACHX,cAAc,KAAK,CAAnB,IACAE,aAAa,CAACM,WAAd,KAA8BF,UAD9B,IAEAJ,aAAa,CAACO,WAAd,GAA4BN,WAAW,GAAG,CAHvC,EAIH;AACA,WAAKF,EAAL,CAAQU,cAAR;AACD,KANI,CAOL;AAPK,SAQA,IACHX,cAAc,KAAK,CAAnB,IACAE,aAAa,CAACM,WAAd,GAA4BF,UAAU,GAAG,CADzC,IAEAJ,aAAa,CAACO,WAAd,KAA8B,CAH3B,EAIH;AACA,WAAKR,EAAL,CAAQS,aAAR;AACD,KANI,CAOL;AAPK,SAQA,IACHV,cAAc,KAAK,CAAC,CAApB,IACAE,aAAa,CAACM,WAAd,KAA8B,CAD9B,IAEAN,aAAa,CAACO,WAAd,GAA4BN,WAAW,GAAG,CAHvC,EAIH;AACA,WAAKF,EAAL,CAAQU,cAAR;AACD,KANI,CAOL;AAPK,SAQA,IACHX,cAAc,KAAK,CAAnB,IACAE,aAAa,CAACM,WAAd,GAA4BF,UAAU,GAAG,CADzC,IAEAJ,aAAa,CAACO,WAAd,KAA8BN,WAH3B,EAIH;AACA,WAAKF,EAAL,CAAQU,cAAR;AACD,KANI,CAOL;AAPK,SAQA,IACHX,cAAc,KAAK,CAAnB,IACAE,aAAa,CAACM,WAAd,GAA4BF,UAAU,GAAG,CADzC,IAEAJ,aAAa,CAACO,WAAd,KAA8BN,WAH3B,EAIH;AACA,WAAKF,EAAL,CAAQS,aAAR;AACD,KANI,CAOL;AAPK,SAQA,IACHV,cAAc,KAAK,CAAnB,IACAE,aAAa,CAACM,WAAd,GAA4BF,UAAU,GAAG,CADzC,IAEAJ,aAAa,CAACO,WAAd,KAA8BN,WAH3B,EAIH;AACA,WAAKF,EAAL,CAAQS,aAAR;AACD;AACF;;AAhF0C","sourcesContent":["import { Player } from \"./Player\";\nimport { Snake, Direction } from \"./Snake\";\nimport { SnakeController } from \"./SnakeController\";\n\n/**\n * Class representing wall behavior according to player location. Stopping the user from leaving the confines of the world.\n */\nexport class AvoidWallsPlayer extends Player {\n  /**\n   * Create AvoidWallsPlayer\n   * @param {SnakeController} passedSakeController\n   */\n  constructor(passedSakeController: SnakeController) {\n    super(passedSakeController);\n  }\n  /**\n   * Turn the snake to avoid the user from hitting the walls of the canvas.\n   */\n  makeTurn(): void {\n    const snakeDirection = this.sc.snakeDirection;\n    const snakePosition = this.sc.snakePosition;\n    const worldHeight = this.sc.world.height;\n    const worldWidth = this.sc.world.width;\n    // If the snake is moving backward and in the quadrant 1, turn the snake left to avoid left wall\n    if (\n      snakeDirection === -1 &&\n      snakePosition.xcoordinate === 0 &&\n      snakePosition.ycoordinate < worldHeight / 2\n    ) {\n      this.sc.turnSnakeLeft();\n    }\n    //If the snake is moving up and in quadrant 1, turn the snake right to avoid the top wall\n    else if (\n      snakeDirection === 0 &&\n      snakePosition.xcoordinate < worldWidth / 2 &&\n      snakePosition.ycoordinate === 0\n    ) {\n      this.sc.turnSnakeRight();\n    }\n    //If the snake is moving forward, in quadrant 2, turn the snake to the right to avoid the right wall\n    else if (\n      snakeDirection === 1 &&\n      snakePosition.xcoordinate === worldWidth &&\n      snakePosition.ycoordinate < worldHeight / 2\n    ) {\n      this.sc.turnSnakeRight();\n    }\n    //If the snake is moving up, in quadrant 2, turn the snake to the left to avoid the top wall\n    else if (\n      snakeDirection === 0 &&\n      snakePosition.xcoordinate > worldWidth / 2 &&\n      snakePosition.ycoordinate === 0\n    ) {\n      this.sc.turnSnakeLeft();\n    }\n    //If the snake is moving backward and in quadrant 3, turn the snake right to avoid the left wall\n    else if (\n      snakeDirection === -1 &&\n      snakePosition.xcoordinate === 0 &&\n      snakePosition.ycoordinate > worldHeight / 2\n    ) {\n      this.sc.turnSnakeRight();\n    }\n    //If the snake is moving down and in quadrant 3, turn the snake right to avoid bottom wall\n    else if (\n      snakeDirection === 2 &&\n      snakePosition.xcoordinate < worldWidth / 2 &&\n      snakePosition.ycoordinate === worldHeight\n    ) {\n      this.sc.turnSnakeRight();\n    }\n    //If the snake is moving down and in quadrant 4, turn the snake left to avoid the bottom wall\n    else if (\n      snakeDirection === 2 &&\n      snakePosition.xcoordinate > worldWidth / 2 &&\n      snakePosition.ycoordinate === worldHeight\n    ) {\n      this.sc.turnSnakeLeft();\n    }\n    //If the snake is moving forward in quadrant 4 turn the snake left to avoid the right wall\n    else if (\n      snakeDirection === 1 &&\n      snakePosition.xcoordinate > worldWidth / 2 &&\n      snakePosition.ycoordinate === worldHeight\n    ) {\n      this.sc.turnSnakeLeft();\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}