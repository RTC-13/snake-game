{"ast":null,"code":"import { Player } from \"./Player\";\nimport { Direction } from \"./Snake\";\n\n/**\n * Class representing wall behavior according to player location. Stopping the user from leaving the confines of the world.\n */\nexport class AvoidWallsPlayer extends Player {\n  /**\n   * Create AvoidWallsPlayer\n   * @param {SnakeController} passedSakeController\n   */\n  constructor(passedSakeController) {\n    super(passedSakeController);\n  }\n  /**\n   * Turn the snake to avoid the user from hitting the walls of the canvas.\n   */\n\n\n  makeTurn() {\n    const snakeDirection = this.sc.snakeDirection;\n    const snakePosition = this.sc.snakePosition;\n    const worldWidth = this.sc.worldWidth;\n    const worldHeight = this.sc.worldHeight; // If the snake is moving backward and in the first quadrant, turn the snake left to avoid left wall\n\n    if (snakeDirection === Direction.Left && snakePosition.x === 0 && snakePosition.y < worldHeight / 2) {\n      this.sc.turnSnakeLeft();\n    } // If the snake is moving up and in the first quadrant, turn the snake right to avoid the top wall\n    else if (snakeDirection === Direction.Up && snakePosition.y === 0 && snakePosition.x < worldWidth / 2) {\n      this.sc.turnSnakeRight();\n    } // If the snake is moving forward and in the second quadrant, turn the snake right to avoid the right wall\n    else if (snakeDirection === Direction.Right && snakePosition.x === worldWidth && snakePosition.y < worldHeight / 2) {\n      this.sc.turnSnakeRight();\n    } // If the snake is moving up and in the second quadrant, turn the snake left to avoid the top wall\n    else if (snakeDirection === Direction.Up && snakePosition.y === 0 && snakePosition.x > worldWidth / 2) {\n      this.sc.turnSnakeLeft();\n    } // If the snake is moving backward and in the third quadrant, turn the snake right to avoid the left wall\n    else if (snakeDirection === Direction.Left && snakePosition.x === 0 && snakePosition.y > worldHeight / 2) {\n      this.sc.turnSnakeRight();\n    } // If the snake is moving down and in the third quadrant, turn the snake right to avoid the bottom wall\n    else if (snakeDirection === Direction.Down && snakePosition.y === worldHeight && snakePosition.x < worldWidth / 2) {\n      this.sc.turnSnakeRight();\n    } // If the snake is moving down and in the fourth quadrant, turn the snake left to avoid the bottom wall\n    else if (snakeDirection === Direction.Down && snakePosition.y === worldHeight && snakePosition.x > worldWidth / 2) {\n      this.sc.turnSnakeLeft();\n    } // If the snake is moving forward in the fourth quadrant, turn the snake left to avoid the right wall\n    else if (snakeDirection === Direction.Right && snakePosition.x === worldWidth && snakePosition.y > worldHeight / 2) {\n      this.sc.turnSnakeRight();\n    }\n  }\n\n}","map":{"version":3,"sources":["/Users/roberttineo/Desktop/snake-game/src/AvoidWallsPlayer.ts"],"names":["Player","Direction","AvoidWallsPlayer","constructor","passedSakeController","makeTurn","snakeDirection","sc","snakePosition","worldWidth","worldHeight","Left","x","y","turnSnakeLeft","Up","turnSnakeRight","Right","Down"],"mappings":"AAAA,SAASA,MAAT,QAAuB,UAAvB;AACA,SAAgBC,SAAhB,QAAiC,SAAjC;;AAGA;AACA;AACA;AACA,OAAO,MAAMC,gBAAN,SAA+BF,MAA/B,CAAsC;AAC3C;AACF;AACA;AACA;AACEG,EAAAA,WAAW,CAACC,oBAAD,EAAwC;AACjD,UAAMA,oBAAN;AACD;AACD;AACF;AACA;;;AACEC,EAAAA,QAAQ,GAAS;AACf,UAAMC,cAAc,GAAG,KAAKC,EAAL,CAAQD,cAA/B;AACA,UAAME,aAAa,GAAG,KAAKD,EAAL,CAAQC,aAA9B;AACA,UAAMC,UAAU,GAAG,KAAKF,EAAL,CAAQE,UAA3B;AACA,UAAMC,WAAW,GAAG,KAAKH,EAAL,CAAQG,WAA5B,CAJe,CAMf;;AACA,QACEJ,cAAc,KAAKL,SAAS,CAACU,IAA7B,IACAH,aAAa,CAACI,CAAd,KAAoB,CADpB,IAEAJ,aAAa,CAACK,CAAd,GAAkBH,WAAW,GAAG,CAHlC,EAIE;AACA,WAAKH,EAAL,CAAQO,aAAR;AACD,KAND,CAOA;AAPA,SAQK,IACHR,cAAc,KAAKL,SAAS,CAACc,EAA7B,IACAP,aAAa,CAACK,CAAd,KAAoB,CADpB,IAEAL,aAAa,CAACI,CAAd,GAAkBH,UAAU,GAAG,CAH5B,EAIH;AACA,WAAKF,EAAL,CAAQS,cAAR;AACD,KANI,CAOL;AAPK,SAQA,IACHV,cAAc,KAAKL,SAAS,CAACgB,KAA7B,IACAT,aAAa,CAACI,CAAd,KAAoBH,UADpB,IAEAD,aAAa,CAACK,CAAd,GAAkBH,WAAW,GAAG,CAH7B,EAIH;AACA,WAAKH,EAAL,CAAQS,cAAR;AACD,KANI,CAOL;AAPK,SAQA,IACHV,cAAc,KAAKL,SAAS,CAACc,EAA7B,IACAP,aAAa,CAACK,CAAd,KAAoB,CADpB,IAEAL,aAAa,CAACI,CAAd,GAAkBH,UAAU,GAAG,CAH5B,EAIH;AACA,WAAKF,EAAL,CAAQO,aAAR;AACD,KANI,CAOL;AAPK,SAQA,IACHR,cAAc,KAAKL,SAAS,CAACU,IAA7B,IACAH,aAAa,CAACI,CAAd,KAAoB,CADpB,IAEAJ,aAAa,CAACK,CAAd,GAAkBH,WAAW,GAAG,CAH7B,EAIH;AACA,WAAKH,EAAL,CAAQS,cAAR;AACD,KANI,CAOL;AAPK,SAQA,IACHV,cAAc,KAAKL,SAAS,CAACiB,IAA7B,IACAV,aAAa,CAACK,CAAd,KAAoBH,WADpB,IAEAF,aAAa,CAACI,CAAd,GAAkBH,UAAU,GAAG,CAH5B,EAIH;AACA,WAAKF,EAAL,CAAQS,cAAR;AACD,KANI,CAOL;AAPK,SAQA,IACHV,cAAc,KAAKL,SAAS,CAACiB,IAA7B,IACAV,aAAa,CAACK,CAAd,KAAoBH,WADpB,IAEAF,aAAa,CAACI,CAAd,GAAkBH,UAAU,GAAG,CAH5B,EAIH;AACA,WAAKF,EAAL,CAAQO,aAAR;AACD,KANI,CAOL;AAPK,SAQA,IACHR,cAAc,KAAKL,SAAS,CAACgB,KAA7B,IACAT,aAAa,CAACI,CAAd,KAAoBH,UADpB,IAEAD,aAAa,CAACK,CAAd,GAAkBH,WAAW,GAAG,CAH7B,EAIH;AACA,WAAKH,EAAL,CAAQS,cAAR;AACD;AACF;;AAjF0C","sourcesContent":["import { Player } from \"./Player\";\nimport { Snake, Direction } from \"./Snake\";\nimport { SnakeController } from \"./SnakeController\";\n\n/**\n * Class representing wall behavior according to player location. Stopping the user from leaving the confines of the world.\n */\nexport class AvoidWallsPlayer extends Player {\n  /**\n   * Create AvoidWallsPlayer\n   * @param {SnakeController} passedSakeController\n   */\n  constructor(passedSakeController: SnakeController) {\n    super(passedSakeController);\n  }\n  /**\n   * Turn the snake to avoid the user from hitting the walls of the canvas.\n   */\n  makeTurn(): void {\n    const snakeDirection = this.sc.snakeDirection;\n    const snakePosition = this.sc.snakePosition;\n    const worldWidth = this.sc.worldWidth;\n    const worldHeight = this.sc.worldHeight;\n\n    // If the snake is moving backward and in the first quadrant, turn the snake left to avoid left wall\n    if (\n      snakeDirection === Direction.Left &&\n      snakePosition.x === 0 &&\n      snakePosition.y < worldHeight / 2\n    ) {\n      this.sc.turnSnakeLeft();\n    }\n    // If the snake is moving up and in the first quadrant, turn the snake right to avoid the top wall\n    else if (\n      snakeDirection === Direction.Up &&\n      snakePosition.y === 0 &&\n      snakePosition.x < worldWidth / 2\n    ) {\n      this.sc.turnSnakeRight();\n    }\n    // If the snake is moving forward and in the second quadrant, turn the snake right to avoid the right wall\n    else if (\n      snakeDirection === Direction.Right &&\n      snakePosition.x === worldWidth &&\n      snakePosition.y < worldHeight / 2\n    ) {\n      this.sc.turnSnakeRight();\n    }\n    // If the snake is moving up and in the second quadrant, turn the snake left to avoid the top wall\n    else if (\n      snakeDirection === Direction.Up &&\n      snakePosition.y === 0 &&\n      snakePosition.x > worldWidth / 2\n    ) {\n      this.sc.turnSnakeLeft();\n    }\n    // If the snake is moving backward and in the third quadrant, turn the snake right to avoid the left wall\n    else if (\n      snakeDirection === Direction.Left &&\n      snakePosition.x === 0 &&\n      snakePosition.y > worldHeight / 2\n    ) {\n      this.sc.turnSnakeRight();\n    }\n    // If the snake is moving down and in the third quadrant, turn the snake right to avoid the bottom wall\n    else if (\n      snakeDirection === Direction.Down &&\n      snakePosition.y === worldHeight &&\n      snakePosition.x < worldWidth / 2\n    ) {\n      this.sc.turnSnakeRight();\n    }\n    // If the snake is moving down and in the fourth quadrant, turn the snake left to avoid the bottom wall\n    else if (\n      snakeDirection === Direction.Down &&\n      snakePosition.y === worldHeight &&\n      snakePosition.x > worldWidth / 2\n    ) {\n      this.sc.turnSnakeLeft();\n    }\n    // If the snake is moving forward in the fourth quadrant, turn the snake left to avoid the right wall\n    else if (\n      snakeDirection === Direction.Right &&\n      snakePosition.x === worldWidth &&\n      snakePosition.y > worldHeight / 2\n    ) {\n      this.sc.turnSnakeRight();\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}