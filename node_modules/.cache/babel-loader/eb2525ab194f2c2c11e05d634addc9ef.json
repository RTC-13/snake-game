{"ast":null,"code":"// import display from \"./display\";\n// place your code on line 5 above the export statement below\nimport Point from \"./Point\";\n/**\r\n * Class representing a Snake.\r\n */\n\nvar Direction;\n\n(function (Direction) {\n  Direction[Direction[\"Up\"] = 1] = \"Up\";\n  Direction[Direction[\"Down\"] = 2] = \"Down\";\n  Direction[Direction[\"Left\"] = 3] = \"Left\";\n  Direction[Direction[\"Right\"] = 4] = \"Right\";\n})(Direction || (Direction = {}));\n\nclass Snake {\n  /**\r\n   * Create a snake\r\n   * @param {string} color of the snake\r\n   */\n  constructor(color) {\n    this.currentPosition = void 0;\n    this.currentDirection = void 0;\n    this.snakeColor = void 0;\n    this.snakeColor = color;\n    this.currentPosition = new Point(0, 0);\n    this.currentDirection = Direction.Right;\n  }\n  /**\r\n   * Access the color of the snake\r\n   * @returns {string} color\r\n   */\n\n\n  get color() {\n    return this.snakeColor;\n  }\n  /**\r\n   * Moves the snake forward the number of steps given.\r\n   * @param {number} steps - The number of steps to move the snake.\r\n   */\n\n\n  move(steps) {\n    if (this.currentDirection === Direction.Left) {\n      this.currentPosition = new Point(this.currentPosition.x - steps, this.currentPosition.y);\n    } else if (this.currentDirection === Direction.Right) {\n      this.currentPosition = new Point(this.currentPosition.x + steps, this.currentPosition.y);\n    } else if (this.currentDirection === Direction.Up) {\n      this.currentPosition = new Point(this.currentPosition.x, this.currentPosition.y - steps);\n    } else if (this.currentDirection === Direction.Down) {\n      this.currentPosition = new Point(this.currentPosition.x, this.currentPosition.y + steps);\n    }\n  }\n  /**\r\n   * @deprecated Use {@link turnLeft} or {@link turnRight}\r\n   * Turns the snake, if facing forward it will turn it backwards and viceversa.\r\n   *\r\n   */\n\n\n  turn() {\n    // is the snake turning clockwise or anticlockwise?\n    // if snake is facing forward, turn it backwards. Else turn it forward.\n    if (this.currentDirection === 1) {\n      this.currentDirection = -1;\n    } else {\n      this.currentDirection = 1;\n    }\n  }\n  /**\r\n   * Turns the snake to the left\r\n   */\n\n\n  turnLeft() {\n    if (this.currentDirection === Direction.Left) {\n      this.currentDirection = Direction.Down;\n    } else if (this.currentDirection === Direction.Up) {\n      this.currentDirection = Direction.Left;\n    } else if (this.currentDirection === Direction.Right) {\n      this.currentDirection = Direction.Up;\n    } else if (this.currentDirection === Direction.Down) {\n      this.currentDirection = Direction.Right;\n    }\n  }\n  /**\r\n   * Turns the snake to the right\r\n   */\n\n\n  turnRight() {\n    if (this.currentDirection === Direction.Left) {\n      this.currentDirection = Direction.Up;\n    } else if (this.currentDirection === Direction.Up) {\n      this.currentDirection = Direction.Right;\n    } else if (this.currentDirection === Direction.Right) {\n      this.currentDirection = Direction.Down;\n    } else if (this.currentDirection === Direction.Down) {\n      this.currentDirection = Direction.Left;\n    }\n  }\n  /**\r\n   *Returns the current position of the Snake.\r\n   @return {Number, Number}\r\n   */\n\n\n  get position() {\n    return this.currentPosition;\n  }\n  /**\r\n   * Returns the current direction of the snake.\r\n   * @return direction of the snake.\r\n   */\n\n\n  get direction() {\n    return this.currentDirection;\n  }\n  /**\r\n   * String representation of the Snake class.\r\n   * @returns String\r\n   */\n\n\n  toString() {\n    return this.snakeColor + \"is at the position\" + this.position;\n  }\n\n}\n\nexport { Snake, Direction };","map":{"version":3,"sources":["/Users/roberttineo/Desktop/snake-game/src/Snake.ts"],"names":["Point","Direction","Snake","constructor","color","currentPosition","currentDirection","snakeColor","Right","move","steps","Left","x","y","Up","Down","turn","turnLeft","turnRight","position","direction","toString"],"mappings":"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","sourcesContent":["// import display from \"./display\";\r\n\r\n// place your code on line 5 above the export statement below\r\nimport Point from \"./Point\";\r\n/**\r\n * Class representing a Snake.\r\n */\r\nenum Direction {\r\n  Up = 1,\r\n  Down,\r\n  Left,\r\n  Right,\r\n}\r\n\r\nclass Snake {\r\n  private currentPosition: Point;\r\n  private currentDirection: number;\r\n  private snakeColor: string;\r\n\r\n  /**\r\n   * Create a snake\r\n   * @param {string} color of the snake\r\n   */\r\n  constructor(color: string) {\r\n    this.snakeColor = color;\r\n    this.currentPosition = new Point(0, 0);\r\n    this.currentDirection = Direction.Right;\r\n  }\r\n\r\n  /**\r\n   * Access the color of the snake\r\n   * @returns {string} color\r\n   */\r\n  public get color(): string {\r\n    return this.snakeColor;\r\n  }\r\n\r\n  /**\r\n   * Moves the snake forward the number of steps given.\r\n   * @param {number} steps - The number of steps to move the snake.\r\n   */\r\n  public move(steps: number) {\r\n    if (this.currentDirection === Direction.Left) {\r\n      this.currentPosition = new Point(\r\n        this.currentPosition.x - steps,\r\n        this.currentPosition.y\r\n      );\r\n    } else if (this.currentDirection === Direction.Right) {\r\n      this.currentPosition = new Point(\r\n        this.currentPosition.x + steps,\r\n        this.currentPosition.y\r\n      );\r\n    } else if (this.currentDirection === Direction.Up) {\r\n      this.currentPosition = new Point(\r\n        this.currentPosition.x,\r\n        this.currentPosition.y - steps\r\n      );\r\n    } else if (this.currentDirection === Direction.Down) {\r\n      this.currentPosition = new Point(\r\n        this.currentPosition.x,\r\n        this.currentPosition.y + steps\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @deprecated Use {@link turnLeft} or {@link turnRight}\r\n   * Turns the snake, if facing forward it will turn it backwards and viceversa.\r\n   *\r\n   */\r\n  public turn(): void {\r\n    // is the snake turning clockwise or anticlockwise?\r\n    // if snake is facing forward, turn it backwards. Else turn it forward.\r\n    if (this.currentDirection === 1) {\r\n      this.currentDirection = -1;\r\n    } else {\r\n      this.currentDirection = 1;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Turns the snake to the left\r\n   */\r\n  public turnLeft(): void {\r\n    if (this.currentDirection === Direction.Left) {\r\n      this.currentDirection = Direction.Down;\r\n    } else if (this.currentDirection === Direction.Up) {\r\n      this.currentDirection = Direction.Left;\r\n    } else if (this.currentDirection === Direction.Right) {\r\n      this.currentDirection = Direction.Up;\r\n    } else if (this.currentDirection === Direction.Down) {\r\n      this.currentDirection = Direction.Right;\r\n    }\r\n  }\r\n  /**\r\n   * Turns the snake to the right\r\n   */\r\n  public turnRight(): void {\r\n    if (this.currentDirection === Direction.Left) {\r\n      this.currentDirection = Direction.Up;\r\n    } else if (this.currentDirection === Direction.Up) {\r\n      this.currentDirection = Direction.Right;\r\n    } else if (this.currentDirection === Direction.Right) {\r\n      this.currentDirection = Direction.Down;\r\n    } else if (this.currentDirection === Direction.Down) {\r\n      this.currentDirection = Direction.Left;\r\n    }\r\n  }\r\n\r\n  /**\r\n   *Returns the current position of the Snake.\r\n   @return {Number, Number}\r\n   */\r\n  public get position(): Point {\r\n    return this.currentPosition;\r\n  }\r\n  /**\r\n   * Returns the current direction of the snake.\r\n   * @return direction of the snake.\r\n   */\r\n  public get direction(): Direction {\r\n    return this.currentDirection;\r\n  }\r\n  /**\r\n   * String representation of the Snake class.\r\n   * @returns String\r\n   */\r\n\r\n  toString(): String {\r\n    return this.snakeColor + \"is at the position\" + this.position;\r\n  }\r\n}\r\n\r\nexport { Snake, Direction };\r\n"]},"metadata":{},"sourceType":"module"}