{"ast":null,"code":"class WorldModel {\n  constructor(worldWidth, worldHeight) {\n    this._allSnakes = void 0;\n    this._allViews = void 0;\n    this._width = void 0;\n    this._height = void 0;\n    // keept old parameters due to tests breaking/other problems\n    this._allSnakes = [];\n    this._allViews = [];\n    this._width = worldWidth;\n    this._height = worldHeight;\n  }\n\n  update(steps) {\n    // Collisions ->\n    const collidedSnakes = [];\n\n    this._allSnakes.forEach(snake => snake.move(steps));\n\n    if (this._allViews) {\n      this._allViews.forEach(view => view.display(this));\n    }\n\n    if (this._allSnakes.some(s => s.didCollide(s))) {\n      collidedSnakes.push(this._allSnakes.find(s => s.didCollide(s)));\n    }\n  }\n\n  addSnake(s) {\n    this._allSnakes.push(s);\n  }\n\n  addView(v) {\n    this._allViews.push(v);\n  }\n\n  get allSnakes() {\n    return this._allSnakes;\n  }\n\n  get width() {\n    return this._width;\n  }\n\n  get height() {\n    return this._height;\n  }\n\n}\n\nexport default WorldModel;","map":{"version":3,"sources":["/Users/roberttineo/Desktop/snake-game/src/WorldModel.ts"],"names":["WorldModel","constructor","worldWidth","worldHeight","_allSnakes","_allViews","_width","_height","update","steps","collidedSnakes","forEach","snake","move","view","display","some","s","didCollide","push","find","addSnake","addView","v","allSnakes","width","height"],"mappings":"AAGA,MAAMA,UAAN,CAAiB;AAMfC,EAAAA,WAAW,CAACC,UAAD,EAAqBC,WAArB,EAA0C;AAAA,SAL7CC,UAK6C;AAAA,SAJ7CC,SAI6C;AAAA,SAH7CC,MAG6C;AAAA,SAF7CC,OAE6C;AACnD;AACA,SAAKH,UAAL,GAAkB,EAAlB;AACA,SAAKC,SAAL,GAAiB,EAAjB;AACA,SAAKC,MAAL,GAAcJ,UAAd;AACA,SAAKK,OAAL,GAAeJ,WAAf;AACD;;AAEMK,EAAAA,MAAM,CAACC,KAAD,EAAsB;AACjC;AACA,UAAMC,cAAc,GAAG,EAAvB;;AACA,SAAKN,UAAL,CAAgBO,OAAhB,CAAyBC,KAAD,IAAWA,KAAK,CAACC,IAAN,CAAWJ,KAAX,CAAnC;;AACA,QAAI,KAAKJ,SAAT,EAAoB;AAClB,WAAKA,SAAL,CAAeM,OAAf,CAAwBG,IAAD,IAAUA,IAAI,CAACC,OAAL,CAAa,IAAb,CAAjC;AACD;;AACD,QAAI,KAAKX,UAAL,CAAgBY,IAAhB,CAAsBC,CAAD,IAAOA,CAAC,CAACC,UAAF,CAAaD,CAAb,CAA5B,CAAJ,EAAkD;AAChDP,MAAAA,cAAc,CAACS,IAAf,CAAoB,KAAKf,UAAL,CAAgBgB,IAAhB,CAAsBH,CAAD,IAAOA,CAAC,CAACC,UAAF,CAAaD,CAAb,CAA5B,CAApB;AACD;AACF;;AAEMI,EAAAA,QAAQ,CAACJ,CAAD,EAAW;AACxB,SAAKb,UAAL,CAAgBe,IAAhB,CAAqBF,CAArB;AACD;;AAEMK,EAAAA,OAAO,CAACC,CAAD,EAAgB;AAC5B,SAAKlB,SAAL,CAAec,IAAf,CAAoBI,CAApB;AACD;;AAEmB,MAATC,SAAS,GAAY;AAC9B,WAAO,KAAKpB,UAAZ;AACD;;AAEe,MAALqB,KAAK,GAAW;AACzB,WAAO,KAAKnB,MAAZ;AACD;;AAEgB,MAANoB,MAAM,GAAW;AAC1B,WAAO,KAAKnB,OAAZ;AACD;;AA5Cc;;AA+CjB,eAAeP,UAAf","sourcesContent":["import { Snake } from \"./Snake\";\r\nimport { IWorldView } from \"./IWorldView\";\r\n\r\nclass WorldModel {\r\n  private _allSnakes: Snake[];\r\n  private _allViews: IWorldView[];\r\n  private _width: number;\r\n  private _height: number;\r\n\r\n  constructor(worldWidth: number, worldHeight: number) {\r\n    // keept old parameters due to tests breaking/other problems\r\n    this._allSnakes = [];\r\n    this._allViews = [];\r\n    this._width = worldWidth;\r\n    this._height = worldHeight;\r\n  }\r\n\r\n  public update(steps: number): void {\r\n    // Collisions ->\r\n    const collidedSnakes = [];\r\n    this._allSnakes.forEach((snake) => snake.move(steps));\r\n    if (this._allViews) {\r\n      this._allViews.forEach((view) => view.display(this));\r\n    }\r\n    if (this._allSnakes.some((s) => s.didCollide(s))) {\r\n      collidedSnakes.push(this._allSnakes.find((s) => s.didCollide(s)));\r\n    }\r\n  }\r\n\r\n  public addSnake(s: Snake) {\r\n    this._allSnakes.push(s);\r\n  }\r\n\r\n  public addView(v: IWorldView) {\r\n    this._allViews.push(v);\r\n  }\r\n\r\n  public get allSnakes(): Snake[] {\r\n    return this._allSnakes;\r\n  }\r\n\r\n  public get width(): number {\r\n    return this._width;\r\n  }\r\n\r\n  public get height(): number {\r\n    return this._height;\r\n  }\r\n}\r\n\r\nexport default WorldModel;\r\n"]},"metadata":{},"sourceType":"module"}